gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec.mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[4]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
objects[[1]][[3]][[4]]
objects[[1]][[3]][[3]]
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
objects[[1]][[3]][[3]]
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
objects[[1]][[1]]
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/01-Simulation-Studies/03-Omnibus-Testing/output/global_two_elements.RData")
logistic <- function(x){1/(1+exp(-x))}
new.data.creat <- function(dat.gam, ind, vector.var=NULL, re=FALSE,
nle=FALSE, var.nle=NULL, var.nle.name=NULL){
new.data <- cbind(1, dat.gam$stp)
colnames(new.data) <- c("y","stp")
colnames_upd <- colnames(new.data)
if(!is.null(vector.var)){
for(var in vector.var){
new.data <- cbind(new.data, dat.gam[,paste(var,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, vector.var)
colnames_upd <- colnames(new.data)
}
if (nle==TRUE){
for(var.nle in var.nle){
new.data <- cbind(new.data, dat.gam[,paste(var.nle,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, var.nle.name)
colnames_upd <- colnames(new.data)
}
if (re==TRUE){
new.data <- cbind(new.data,
cbind(dat.gam[,paste("s",ind,sep="")],
matrix(1,nrow(dat.gam),1),
dat.gam[,paste("r",ind,sep="")],
matrix(1,nrow(dat.gam),1)))
colnames(new.data) <- c(colnames_upd, "s","Ls","r","Lr")
}
return(data.frame(new.data))
}
simulated_G <- function(dat.gam, gam.fit, phi1, phi2, n.sim,
vector.var = NULL,
nle = TRUE, var.nle = NULL,
var.nle.name = NULL,
re = FALSE){
phi = phi1 - phi2
n.e <- nrow(dat.gam)
# Extract the design matrix from the GAM fit
X <- model.matrix(gam.fit)
# Calculate the mean response values
mu <- gam.fit$fitted.values
# Calculate the linear predictor
lp <- predict(gam.fit, type="link")
# Compute the working residuals
w <- as.vector(1-logistic(lp))
w.ev <- w
w.nv <- as.vector(1-logistic(-lp))
# Psi process
G.contr <- phi * w
# Score process
Score.contr <- X * w
# Inverse Information matrix
I.inv <- gam.fit$Vp
G <- cumsum(G.contr)
new.data.ev <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam,
ind = 1,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
new.data.nv <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam, ind = 2,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
X.ev <- predict.gam(gam.fit, type="lpmatrix", newdata = new.data.ev)
X.nv <- predict.gam(gam.fit, type="lpmatrix", newdata = new.data.nv)
Process.contr <- (X.ev * w.ev * as.vector(phi1 * logistic(lp)) +
X.nv * w.nv * as.vector(phi2 * logistic(-lp)))
# exp.lp.ev <- as.vector(exp(predict.gam(gam.fit, type="link",
#                                        newdata = new.data.ev)))
# exp.lp.nv <- as.vector(exp(predict.gam(gam.fit, type="link",
#                                        newdata = new.data.nv)))
# Process.contr <- (X.ev * w.ev * phi1 * exp.lp.ev +
#                     X.nv * w.nv * phi2 * exp.lp.nv)/(exp.lp.ev + exp.lp.nv)
Process <- apply(Process.contr, 2, cumsum)
G_simulations <- sapply(1:n.sim, function(x){
set.seed(x)
random <- rnorm(n.e, 0, 1)
G.var <- cumsum(G.contr*random)
Score.contr.var <- apply(Score.contr, 2, function(x) x*random)
Score.var <- apply(Score.contr.var, 2, sum)
Score.stand.var <- I.inv %*% Score.var
G_sim <- G.var - Process %*% Score.stand.var
return(as.vector(G_sim))
}, simplify=TRUE)
return(list(G=G,
G_simulations = G_simulations))
}
test <- function(simulation_object){
process <- simulation_object$G
simulations <- simulation_object$G_simulations
stat <- max(abs(process))
sim.stat <- apply(simulations, 2, function(x) max(abs(x)))
pvalue <- mean(sim.stat>=stat)
return(pvalue)
}
simCS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[2]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim= 50,
vector.var = c("last.rec", "x1"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueCS <- unlist(lapply(simCS, test))
plot(ecdf(pvalueCS))
abline(0,1)
mean(pvalueCS <= 0.05)
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[1]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis", "x1"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueMS <- unlist(lapply(simMS, test))
plot(ecdf(pvalueMS))
abline(0,1)
mean(pvalueMS <= 0.05)
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[2]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueMS <- unlist(lapply(simMS, test))
plot(ecdf(pvalueMS))
abline(0,1)
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis ", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
x <- objects[[1]]
dat.gam = x[[1]]
gam.fit = x[[3]][[3]]
phi1 = x[[1]]$x11
phi2 = x[[1]]$x12
n.sim=50
vector.var = c("last.rec_mis ", "x4")
nle = FALSE
var.nle = NULL
var.nle.name = NULL
re=FALSE
phi = phi1 - phi2
n.e <- nrow(dat.gam)
# Extract the design matrix from the GAM fit
X <- model.matrix(gam.fit)
# Calculate the mean response values
mu <- gam.fit$fitted.values
# Calculate the linear predictor
lp <- predict(gam.fit, type="link")
# Compute the working residuals
w <- as.vector(1-logistic(lp))
w.ev <- w
w.nv <- as.vector(1-logistic(-lp))
# Psi process
G.contr <- phi * w
# Score process
Score.contr <- X * w
# Inverse Information matrix
I.inv <- gam.fit$Vp
G <- cumsum(G.contr)
new.data.ev <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam,
ind = 1,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
new.data.nv <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam, ind = 2,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
new.data.ev <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam,
ind = 1,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
new.data <- cbind(1, dat.gam$stp)
colnames(new.data) <- c("y","stp")
colnames_upd <- colnames(new.data)
if(!is.null(vector.var)){
for(var in vector.var){
new.data <- cbind(new.data, dat.gam[,paste(var,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, vector.var)
colnames_upd <- colnames(new.data)
}
ind = 1
new.data <- cbind(1, dat.gam$stp)
colnames(new.data) <- c("y","stp")
colnames_upd <- colnames(new.data)
if(!is.null(vector.var)){
for(var in vector.var){
new.data <- cbind(new.data, dat.gam[,paste(var,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, vector.var)
colnames_upd <- colnames(new.data)
}
if (nle==TRUE){
for(var.nle in var.nle){
new.data <- cbind(new.data, dat.gam[,paste(var.nle,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, var.nle.name)
colnames_upd <- colnames(new.data)
}
new.data <- cbind(1, dat.gam$stp)
colnames(new.data) <- c("y","stp")
colnames_upd <- colnames(new.data)
if(!is.null(vector.var)){
for(var in vector.var){
new.data <- cbind(new.data, dat.gam[,paste(var,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, vector.var)
colnames_upd <- colnames(new.data)
}
vector.var
var
simMS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[3]][[3]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim=50,
vector.var = c("last.rec_mis", "x4"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueMS <- unlist(lapply(simMS, test))
plot(ecdf(pvalueMS))
abline(0,1)
simCS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[2]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim= 50,
vector.var = c("last.rec", "x1"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueCS <- unlist(lapply(simCS, test))
plot(ecdf(pvalueCS))
abline(0,1)
mean(pvalueCS <= 0.05)
simCS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[2]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim= 1000,
vector.var = c("last.rec", "x1"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
pvalueCS <- unlist(lapply(simCS, test))
plot(ecdf(pvalueCS))
abline(0,1)
mean(pvalueCS <= 0.05)
phi = phi1 - phi2
n.e <- nrow(dat.gam)
# Extract the design matrix from the GAM fit
X <- model.matrix(gam.fit)
# Calculate the mean response values
mu <- gam.fit$fitted.values
# Calculate the linear predictor
lp <- predict(gam.fit, type="link")
# Compute the working residuals
w <- as.vector(1-logistic(lp))
w.ev <- w
w.nv <- as.vector(1-logistic(-lp))
# Psi process
G.contr <- phi * w
# Score process
Score.contr <- X * w
# Inverse Information matrix
I.inv <- gam.fit$Vp
plot(ginv(crossprod(Score.contr)/(n.e)))
#-------------------------------------------------------------------------------
# 0. Loading required packages ####
library(mgcv)
library(mgcViz)
library(RColorBrewer)
library(gridExtra)
library(sde)
library(Matrix)
library(expm)
library(gratia)
library(e1071)
library(extraDistr)
library(lubridate)
plot(ginv(crossprod(Score.contr)/(n.e)))
abline(0,1)
ginv(crossprod(Score.contr)
ginv(crossprod(Score.contr)/(n.e))
ginv(crossprod(Score.contr)/(n.e))
plot(ginv(crossprod(Score.contr)/(n.e)), I.inv)
plot(ginv(crossprod(Score.contr)), I.inv)
abline(0,1)
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/01-Simulation-Studies/01-Testing-Non-Linear-Effect/output/nonlinear_n5000.RData")
logistic <- function(x){1/(1+exp(-x))}
new.data.creat <- function(dat.gam, ind, vector.var=NULL, re=FALSE,
nle=FALSE, var.nle=NULL, var.nle.name=NULL){
new.data <- cbind(1, dat.gam$stp)
colnames(new.data) <- c("y","stp")
colnames_upd <- colnames(new.data)
if(!is.null(vector.var)){
for(var in vector.var){
new.data <- cbind(new.data, dat.gam[,paste(var,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, vector.var)
colnames_upd <- colnames(new.data)
}
if (nle==TRUE){
for(var.nle in var.nle){
new.data <- cbind(new.data, dat.gam[,paste(var.nle,ind,sep="")])
}
colnames(new.data) <- c(colnames_upd, var.nle.name)
colnames_upd <- colnames(new.data)
}
if (re==TRUE){
new.data <- cbind(new.data,
cbind(dat.gam[,paste("s",ind,sep="")],
matrix(1,nrow(dat.gam),1),
dat.gam[,paste("r",ind,sep="")],
matrix(1,nrow(dat.gam),1)))
colnames(new.data) <- c(colnames_upd, "s","Ls","r","Lr")
}
return(data.frame(new.data))
}
simulated_G <- function(dat.gam, gam.fit, phi1, phi2, n.sim,
vector.var = NULL,
nle = TRUE, var.nle = NULL,
var.nle.name = NULL,
re = FALSE){
phi = phi1 - phi2
n.e <- nrow(dat.gam)
# Extract the design matrix from the GAM fit
X <- model.matrix(gam.fit)
# Calculate the mean response values
mu <- gam.fit$fitted.values
# Calculate the linear predictor
lp <- predict(gam.fit, type="link")
# Compute the working residuals
w <- as.vector(1-logistic(lp))
w.ev <- w
w.nv <- as.vector(1-logistic(-lp))
# Psi process
G.contr <- phi * w
# Score process
Score.contr <- X * w
# Inverse Information matrix
I.inv <- gam.fit$Vp
plot(ginv(crossprod(Score.contr)), I.inv)
abline(0,1)
G <- cumsum(G.contr)
new.data.ev <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam,
ind = 1,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
new.data.nv <- new.data.creat(vector.var = vector.var,
dat.gam = dat.gam, ind = 2,
nle = TRUE,
var.nle = var.nle,
var.nle.name = var.nle.name,
re = FALSE)
X.ev <- predict.gam(gam.fit, type="lpmatrix", newdata = new.data.ev)
X.nv <- predict.gam(gam.fit, type="lpmatrix", newdata = new.data.nv)
Process.contr <- (X.ev * w.ev * as.vector(phi1 * logistic(lp)) +
X.nv * w.nv * as.vector(phi2 * logistic(-lp)))
# exp.lp.ev <- as.vector(exp(predict.gam(gam.fit, type="link",
#                                        newdata = new.data.ev)))
# exp.lp.nv <- as.vector(exp(predict.gam(gam.fit, type="link",
#                                        newdata = new.data.nv)))
# Process.contr <- (X.ev * w.ev * phi1 * exp.lp.ev +
#                     X.nv * w.nv * phi2 * exp.lp.nv)/(exp.lp.ev + exp.lp.nv)
Process <- apply(Process.contr, 2, cumsum)
G_simulations <- sapply(1:n.sim, function(x){
set.seed(x)
random <- rnorm(n.e, 0, 1)
G.var <- cumsum(G.contr*random)
Score.contr.var <- apply(Score.contr, 2, function(x) x*random)
Score.var <- apply(Score.contr.var, 2, sum)
Score.stand.var <- I.inv %*% Score.var
G_sim <- G.var - Process %*% Score.stand.var
return(as.vector(G_sim))
}, simplify=TRUE)
return(list(G=G,
G_simulations = G_simulations))
}
test <- function(simulation_object){
process <- simulation_object$G
simulations <- simulation_object$G_simulations
stat <- max(abs(process))
sim.stat <- apply(simulations, 2, function(x) max(abs(x)))
pvalue <- mean(sim.stat>=stat)
return(pvalue)
}
simCS <- lapply(objects, function(x)
simulated_G(dat.gam = x[[1]],
gam.fit = x[[2]],
phi1 = x[[1]]$x11,
phi2 = x[[1]]$x12,
n.sim= 100,
vector.var = c("last.rec", "x1"),
nle = FALSE,
var.nle = NULL,
var.nle.name = NULL,
re=FALSE))
colnames(objects[[1]])
colnames(objects[[1]][[1]])
