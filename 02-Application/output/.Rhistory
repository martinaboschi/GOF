for (j in 1:(m.ncc-1)){
sr.nv<-sample(setdiff((1:(p^2)),sr.ev),1)
s.nv<-(sr.nv-1)%%p+1
r.nv<-(sr.nv-1)%/%p+1
dat.gam <- rbind(dat.gam, c(t, s.ev, r.ev, s.nv, r.nv,
last.rec(t)[s.ev, r.ev],
last.rec(t)[s.nv, r.nv],
last.rec(t)[s.ev, r.ev] -
last.rec(t)[s.nv, r.nv],
first.rec(t)[s.ev, r.ev],
first.rec(t)[s.nv, r.nv],
first.rec(t)[s.ev, r.ev] -
first.rec(t)[s.nv, r.nv],
rec(t)[s.ev, r.ev],
rec(t)[s.nv, r.nv],
rec(t)[s.ev, r.ev] - rec(t)[s.nv, r.nv],
j))
}
first_time[s.ev,r.ev] <- ifelse(first_time[s.ev,r.ev]==-Inf, t,
first_time[s.ev,r.ev])
last_time[s.ev,r.ev] <- t
rate.upd <- beta1 * last.rec(t)
tot.rate <- exp(rate + rate.upd)
diag(tot.rate) <- 0
if(close.rec==TRUE){
first_time[r.ev,s.ev] <- ifelse(rec(t)[s.ev,r.ev], -Inf,
first_time[r.ev,s.ev])
last_time[r.ev,s.ev] <- ifelse(rec(t)[s.ev,r.ev], -Inf,
last_time[r.ev,s.ev])
}
}
dat.gam <- data.frame(y = rep(1, nrow(dat.gam)),
stp = dat.gam[,1],
s1 = dat.gam[,2],
r1 = dat.gam[,3],
s2 = dat.gam[,4],
r2 = dat.gam[,5],
last.rec1 = dat.gam[,6],
last.rec2 = dat.gam[,7],
last.rec = dat.gam[,8],
first.rec1 = dat.gam[,9],
first.rec2 = dat.gam[,10],
first.rec = dat.gam[,11],
rec1 = dat.gam[,12],
rec2 = dat.gam[,13],
rec = dat.gam[,14],
m.ncc = dat.gam[,15])
return(dat.gam)
}
load("~/Library/CloudStorage/OneDrive-USI/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/analysis.RData")
library(RColorBrewer)
library(ggplot2)
pal.blue <- brewer.pal(9, "Blues")
pal.yellow <- brewer.pal(9, "YlOrBr")
pal.greys <- brewer.pal(9, "Greys")
#-------------------------------------------------------------------------------
s1 <- dat.gam$s1
s2 <- dat.gam$s2
ss <- factor(c(s1,s2))
dim(ss) <- c(length(s1),2)
Ls <- matrix(1,length(s1),2); Ls[,2] <- -1
r1 <- dat.gam$r1
r2 <- dat.gam$r2
rr <- factor(c(r1,r2))
dim(rr) <- c(length(r1),2)
Lr <- matrix(1,length(r1),2); Lr[,2] <- -1
new.data <- data.frame(Weight=1,
Rec_Mat = dat.gam$timeRec1,
Cyc_Mat = dat.gam$timeCyc1,
Rep_Mat = dat.gam$timeIner1,
Trs_Mat = dat.gam$timeTriad1,
ss = ss[,1],
Ls = 1,
rr = rr[,1],
Lr = 1)
dat.gam[, c("or.rec1",
"or.rec2",
"or.cyclic1",
"or.cyclic2",
"or.inert1",
"or.inert2",
"or.triadic1",
"or.triadic2")] <- apply(dat.gam[c(
"timeRec1",
"timeRec2",
"timeCyc1",
"timeCyc2",
"timeIner1",
"timeIner2",
"timeTriad1",
"timeTriad2"
)], 2, function(x) -log(x))
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
library(lubridate)
email <- read.csv("manufacturing.csv", sep = ";")
sel <- which(email[,1]==email[,2])
#-------------------------------------------------------------------------------
pred.triadic  <- predict(gam.fitNL_complete.re,
exclude = c("s(ss):Ls",
"s(rr):Lr",
"s(Rec_Mat):Weight",
"s(Rep_Mat):Weight",
"s(Cyc_Mat):Weight"),
type = "terms",
newdata = new.data)
pred.rec  <- predict(gam.fitNL_complete.re,
exclude = c("s(ss):Ls",
"s(rr):Lr",
"s(Trs_Mat):Weight",
"s(Rep_Mat):Weight",
"s(Cyc_Mat):Weight"),
type = "terms",
newdata = new.data)
pred.rep  <- predict(gam.fitNL_complete.re,
exclude = c("s(ss):Ls",
"s(rr):Lr",
"s(Trs_Mat):Weight",
"s(Rec_Mat):Weight",
"s(Cyc_Mat):Weight"),
type = "terms",
newdata = new.data)
pred.cyc  <- predict(gam.fitNL_complete.re,
exclude = c("s(ss):Ls",
"s(rr):Lr",
"s(Trs_Mat):Weight",
"s(Rec_Mat):Weight",
"s(Rep_Mat):Weight"),
type = "terms",
newdata = new.data)
xstart = c(0,0.34,0.68,0.85,1.19, 1.70)
xend = c(0.34,0.68,0.85,1.19,1.70,2.55)
labels = c("00-08h",
"08-16h",
"16-20h",
"20-24h",
"24-36h",
"36-56h")
rects = data.frame(xstart = xstart,
xend = xend,
col = labels)
rec_plot <- ggplot() +
theme_classic() +
geom_rect(data = rects, aes(xmin = xstart,
xmax = xend,
ymin = -Inf,
ymax = Inf,
fill = col),
alpha = 0.5) +
geom_line(data = data.frame(dat.gam$or.rec1[dat.gam$or.rec1<7],
pred.rec[dat.gam$or.rec1<7]),
aes(x=dat.gam$or.rec1[dat.gam$or.rec1<7],
y=pred.rec[dat.gam$or.rec1<7]),
size=1)
for(x.line in c(xstart,xend[length(xend)])){
rec_plot <- rec_plot +
geom_vline(xintercept = x.line,
linetype = "dashed",
color = "black")
}
rec_plot +
labs(title = "Non-Linear Effect of Reciprocity",
x = "Time from the Reciprocal Event",
y = "Effect") +
scale_fill_discrete(name="Time-Window",
labels=labels) +
theme(axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
legend.text = element_text(color = "grey20",
size = 12,
face = "plain",),
title = element_text(color = "black",
size = 14, angle = 0,
hjust = .5, vjust = .5,
family="serif", face = "bold"))
xstart = c(0,0.34,0.68,0.85,1.19, 1.70)
xend = c(0.34,0.68,0.85,1.19,1.70,2.55)
labels = c("00-08h",
"08-16h",
"16-20h",
"20-24h",
"24-36h",
"36-56h")
rects = data.frame(xstart = xstart,
xend = xend,
col = labels)
cyc_plot <- ggplot() +
theme_classic() +
geom_rect(data = rects, aes(xmin = xstart,
xmax = xend,
ymin = -Inf,
ymax = Inf,
fill = col),
alpha = 0.5) +
geom_line(data = data.frame(dat.gam$or.cyclic1[dat.gam$or.cyclic1<7],
pred.cyc[dat.gam$or.cyclic1<7]),
aes(x=dat.gam$or.cyclic1[dat.gam$or.cyclic1<7],
y=pred.cyc[dat.gam$or.cyclic1<7]),
size=1)
for(x.line in c(xstart,xend[length(xend)])){
cyc_plot <- cyc_plot +
geom_vline(xintercept = x.line,
linetype = "dashed",
color = "black")
}
cyc_plot +
labs(title = "Non-Linear Effect of Cyclic Closure",
x = "Time from the Reciprocal Event",
y = "Effect") +
scale_fill_discrete(name="Time-Window",
labels=labels) +
theme(axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
legend.text = element_text(color = "grey20",
size = 12,
face = "plain",),
title = element_text(color = "black",
size = 14, angle = 0,
hjust = .5, vjust = .5,
family="serif", face = "bold"))
re.gam <- coef(gam.fitNL_complete.re)[37:length(coef(gam.fitNL_complete.re))]
#### SENDER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[5,1])
re.send <- re.gam[1:length(levels(ss))]
names(re.send) <- levels(ss)
sort(re.send, decreasing = TRUE)[1:5]
sort(table(dat.gam$s1), decreasing = T)[1:20]
#### RECEIVER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[6,1])
re.rec <- re.gam[(length(levels(ss))+1):length(re.gam)]
names(re.rec) <- levels(rr)
sort(re.rec, decreasing = TRUE)[1:5]
sort(table(dat.gam$r1), decreasing = T)[1:15]
plot(gam.fitNL_complete.re)
setwd("/Users/martina.boschi/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output")
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/analysis.RData")
(GOF_global.with.time.nle_complete.re <- GOF_pvalue_global(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
set_covariates =
list(1:9,10:18,19:27,28:36,37:195,196:354),
BB.stat = BB.stat_9.9.9.9.159.159))
coefficients(gam.fitNL_complete.re)[1:9]
GOF_rec.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 1:9,
BB.stat = BB.stat_9[[2]])
(GOF_rec.with.time.nle_complete.re[[1]])
coefficients(gam.fitNL_complete.re)[10:18]
GOF_trs.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 10:18,
BB.stat = BB.stat_9[[2]])
(GOF_trs.with.time.nle_complete.re[[1]])
coefficients(gam.fitNL_complete.re)[19:27]
GOF_rep.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 19:27,
BB.stat = BB.stat_9[[2]])
(GOF_rep.with.time.nle_complete.re[[1]])
coefficients(gam.fitNL_complete.re)[28:36]
GOF_cyc.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 28:36,
BB.stat = BB.stat_9[[2]])
(GOF_cyc.with.time.nle_complete.re[[1]])
coefficients(gam.fitNL_complete.re)[37:195]
GOF_sre.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 37:195,
BB.stat = BB.stat_159[[2]])
(GOF_sre.with.time.nle_complete.re[[1]])
coefficients(gam.fitNL_complete.re)[196:354]
GOF_rre.with.time.nle_complete.re <- GOF_multivariate(data =
dat.gam,
gam.fit = gam.fitNL_complete.re,
index = 196:354,
BB.stat = BB.stat_159[[2]])
GOF_global.with.time.nle_complete.re
re.gam <- coef(gam.fitNL_complete.re)[37:length(coef(gam.fitNL_complete.re))]
#### SENDER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[5,1])
re.send <- re.gam[1:length(levels(ss))]
names(re.send) <- levels(ss)
sort(re.send, decreasing = TRUE)[1:5]
sort(table(dat.gam$s1), decreasing = T)[1:20]
#### RECEIVER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[6,1])
sort(re.send, decreasing = TRUE)[1:5]
sort(table(dat.gam$s1), decreasing = T)[1:20]
setwd("/Users/martina.boschi/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/input")
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("02-Application/input/manufacturing.csv", sep = ";")
nrow(email)
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("manufacturing.csv", sep = ";")
nrow(email)
range(email$EventDate)
# Do not consider auto-email
sel <- which(email[,1]==email[,2])
email <- email[-sel,]
# Consider only unique email
email <- unique(email)
# Consider only one email per time-point
sel <- unique(email$EventDate)
o <- !duplicated(email$EventDate)
email <- email[o,]
# Numerical format of time
# (# of days from the first email)
dates <- email$EventDate
tms <- time_length(seconds(ymd_hms(email[,3])))
tms <- tms-min(tms)+1
tms <- tms/(24*60*60)
# Emails as relational events (s,r,t)
email <- cbind(tms, email[,c(1,2)])
colnames(email) <- c("stp","s","r")
# Set of unique senders and receivers
senders <- unique(email$s)
receivers <- unique(email$r)
length(senders)
length(receivers)
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("02-Application/input/manufacturing.csv", sep = ";")
nrow(email)
range(email$EventDate)
# Do not consider auto-email
sel <- which(email[,1]==email[,2])
email <- email[-sel,]
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("manufacturing.csv", sep = ";")
nrow(email)
range(email$EventDate)
# Do not consider auto-email
sel <- which(email[,1]==email[,2])
email <- email[-sel,]
# Consider only unique email
email <- unique(email)
# Consider only one email per time-point
sel <- unique(email$EventDate)
o <- !duplicated(email$EventDate)
email <- email[o,]
# Numerical format of time
# (# of days from the first email)
dates <- email$EventDate
tms <- time_length(seconds(ymd_hms(email[,3])))
tms <- tms-min(tms)+1
tms <- tms/(24*60*60)
# Emails as relational events (s,r,t)
email <- cbind(tms, email[,c(1,2)])
colnames(email) <- c("stp","s","r")
orginal_code_senders <- email$s
orginal_code_receivers <- email$r
orginal_code_senders
orginal_code_receivers
email$s <- match(email$s, actors)
email$r <- match(email$r, actors)
# Numerical codification of senders and receivers
actors <- unique(c(email$s, email$r))
email$s <- match(email$s, actors)
email$r <- match(email$r, actors)
email
actors[head(email$s)]
orginal_code_senders
actors[head(email$s)]
email$s[1:6]
# Consider only unique email
email <- unique(email)
# Consider only one email per time-point
sel <- unique(email$EventDate)
o <- !duplicated(email$EventDate)
email <- email[o,]
# Numerical format of time
# (# of days from the first email)
dates <- email$EventDate
tms <- time_length(seconds(ymd_hms(email[,3])))
tms <- tms-min(tms)+1
tms <- tms/(24*60*60)
# Emails as relational events (s,r,t)
email <- cbind(tms, email[,c(1,2)])
colnames(email) <- c("stp","s","r")
# Set of unique senders and receivers
senders <- unique(email$s)
receivers <- unique(email$r)
length(senders)
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("manufacturing.csv", sep = ";")
nrow(email)
range(email$EventDate)
# Do not consider auto-email
sel <- which(email[,1]==email[,2])
email <- email[-sel,]
# Consider only unique email
email <- unique(email)
# Consider only one email per time-point
sel <- unique(email$EventDate)
o <- !duplicated(email$EventDate)
email <- email[o,]
# Numerical format of time
# (# of days from the first email)
dates <- email$EventDate
tms <- time_length(seconds(ymd_hms(email[,3])))
tms <- tms-min(tms)+1
tms <- tms/(24*60*60)
# Emails as relational events (s,r,t)
email <- cbind(tms, email[,c(1,2)])
colnames(email) <- c("stp","s","r")
# Set of unique senders and receivers
senders <- unique(email$s)
receivers <- unique(email$r)
length(senders)
length(receivers)
# Numerical codification of senders and receivers
actors <- unique(c(email$s, email$r))
email$s <- match(email$s, actors)
email$r <- match(email$r, actors)
actors[head(email$s)]
orginal_code_senders[1:6]
#-------------------------------------------------------------------------------
# 2. Preliminary analysis on the data
email <- read.csv("manufacturing.csv", sep = ";")
nrow(email)
range(email$EventDate)
# Do not consider auto-email
sel <- which(email[,1]==email[,2])
email <- email[-sel,]
# Consider only unique email
email <- unique(email)
# Consider only one email per time-point
sel <- unique(email$EventDate)
o <- !duplicated(email$EventDate)
email <- email[o,]
# Numerical format of time
# (# of days from the first email)
dates <- email$EventDate
tms <- time_length(seconds(ymd_hms(email[,3])))
tms <- tms-min(tms)+1
tms <- tms/(24*60*60)
# Emails as relational events (s,r,t)
email <- cbind(tms, email[,c(1,2)])
colnames(email) <- c("stp","s","r")
# Set of unique senders and receivers
senders <- unique(email$s)
receivers <- unique(email$r)
length(senders)
length(receivers)
# Numerical codification of senders and receivers
actors <- unique(c(email$s, email$r))
email$s <- match(email$s, actors)
email$r <- match(email$r, actors)
save(actors, file="actors.RData")
setwd("/Users/martina.boschi/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output")
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/actors.RData")
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/analysis.RData")
#### SENDER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[5,1])
re.send <- re.gam[1:length(levels(ss))]
re.send <- re.gam[1:length(levels(ss))]
re.gam <- coef(gam.fitNL_complete.re)[37:length(coef(gam.fitNL_complete.re))]
#### SENDER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[5,1])
re.send <- re.gam[1:length(levels(ss))]
names(re.send) <- levels(ss)
sort(re.send, decreasing = TRUE)[1:5]
sort(table(dat.gam$s1), decreasing = T)[1:20]
#### RECEIVER ACTIVITY ####
as.numeric(gam.vcomp(gam.fitNL_complete.re)[6,1])
re.rec <- re.gam[(length(levels(ss))+1):length(re.gam)]
names(re.rec) <- levels(rr)
sort(re.rec, decreasing = TRUE)[1:5]
sort(table(dat.gam$r1), decreasing = T)[1:15]
names(sort(re.rec, decreasing = TRUE)[1:5])
as.numeric(names(sort(re.rec, decreasing = TRUE)[1:5]))
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/actors.RData")
actors[as.numeric(names(sort(re.rec, decreasing = TRUE)[1:5]))]
actors[as.numeric(names(sort(re.send, decreasing = TRUE)[1:5]))]
actors[as.numeric(names(sort(re.send, decreasing = TRUE)[1:10]))]
actors[as.numeric(names(sort(re.rec, decreasing = TRUE)[1:10]))]
head(dat.gam)
head(actors(dat.gam$s1))
load("~/Dropbox/Martina/PhD/04-Goodness-Of-Fit/02-GitHub-Repository/02-Application/output/actors.RData")
head(actors(dat.gam$s1))
head(actors[dat.gam$s1])
